type Activity {
  id: ID!
  foreignId: ID!
  created: String!
  blame: String!
  type: String!
  operation: String!
  oldValue: String!
  change: String!
}

input NewActivityInput {
  blame: String!
  type: String!
  foreignId: ID!
  operation: String!
  oldValue: String!
  change: String!
}

input ActivityInput {
  blame: String
  type: String
  operation: String
  foreignId: ID
  id: ID
}

type Query {
  Activity(input: ActivityInput!): Activity!
  Activities: [Activity]!
}

type Mutation {
  newActivity(input: NewActivityInput!): Activity!
}