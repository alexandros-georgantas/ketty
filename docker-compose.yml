version: '3'

services:
  language-tool:
    image: silviof/docker-languagetool
    restart: always
    ports:
      - ${LANGUAGE_PORT:-8010}:8010
  job-xsweet:
    image: pubsweet/job-xsweet
    build:
      context: https://gitlab.coko.foundation/pubsweet/pubsweet.git#xsweet-docker
      dockerfile: components/server/job-xsweet/Dockerfile
      args:
        WAIT_SERVICE_PORT: 'postgres:5432'
    restart: always
    container_name: job-xsweet
    hostname: job-xsweet
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  job-epubcheck:
    image: editoria/job-epubcheck
    build:
      context: https://gitlab.coko.foundation/editoria/editoria.git
      dockerfile: services/job-epubcheck/Dockerfile
      args:
        WAIT_SERVICE_PORT: 'postgres:5432'
    restart: always
    container_name: job-epubcheck
    hostname: job-epubcheck
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./uploads:/uploads/
  job-pandoc:
    image: editoria/job-pandoc
    build:
      context: https://gitlab.coko.foundation/editoria/editoria.git
      dockerfile: services/job-pandoc/Dockerfile
      args:
        WAIT_SERVICE_PORT: 'postgres:5432'
    restart: always
    container_name: job-pandoc
    hostname: job-pandoc
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./uploads:/uploads/
  job-pdf:
    image: editoria/job-pdf
    build:
      context: https://gitlab.coko.foundation/editoria/editoria.git
      dockerfile: services/job-pdf/Dockerfile
      args:
        WAIT_SERVICE_PORT: 'postgres:5432'
    restart: always
    container_name: job-pdf
    hostname: job-pdf
    security_opt:
      - seccomp:seccomp.json
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    volumes:
      - ./uploads:/uploads/
  postgres:
    image: postgres:10-alpine
    restart: always
    container_name: postgres
    hostname: postgres
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    expose:
      - ${POSTGRES_PORT:-5432}
    environment:
      - POSTGRES_USER
      - POSTGRES_DB
      - POSTGRES_PASSWORD
      - POSTGRES_PORT
    volumes:
      - ./database/data:/var/lib/postgresql/data
  postgres_test:
    image: postgres:10-alpine
    ports:
      - 5433:5432
    environment:
      - POSTGRES_DB=test
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=pass
  file_hosting:
    image: minio/minio
    ports:
      - ${S3_PORT:-9000}:9000
    volumes:
      - ./storage/minio:/data
    environment:
      - MINIO_ACCESS_KEY=${S3_ACCESS_KEY_ID_ADMIN:-accessKey}
      - MINIO_SECRET_KEY=${S3_SECRET_ACCESS_KEY_ADMIN:-secretKey}
    command: server /data
  createbucket:
    image: minio/mc
    depends_on:
      - file_hosting
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add editoria http://file_hosting:9000 ${S3_ACCESS_KEY_ID_ADMIN:-admin} ${S3_SECRET_ACCESS_KEY_ADMIN:-adminSuperPassword};
      /usr/bin/mc admin user add editoria/ ${S3_ACCESS_KEY_ID_USER:-editoria} ${S3_SECRET_ACCESS_KEY_USER:-editoriaSuperPassword};
      /usr/bin/mc admin user enable editoria/ ${S3_ACCESS_KEY_ID_USER:-editoria};
      /usr/bin/mc mb editoria/${S3_BUCKET:-uploads};
      /usr/bin/mc admin policy set editoria/ readwrite user=${S3_ACCESS_KEY_ID_USER};
      exit 0;
      "
