include:
  - project: 'cokoapps/ci'
    ref: main
    file: 'ci-templates.yml'

variables:
  IMAGE_NAME_DEVELOPMENT: ketty-client-ci-development
  IMAGE_NAME_PREPRODUCTION_DEVELOP: ketty-client-ci-production-develop
  IMAGE_NAME_PREPRODUCTION_DEMO: ketty-client-ci-production-demo
  IMAGE_NAME_PRODUCTION_DEVELOP: ketty-client-deploy-develop
  IMAGE_NAME_PRODUCTION_DEMO: ketty-client
  IMAGE_NAME_STORYBOOK: ketty-client-storybook
  PATH_TO_BUILD: .
  PATH_INSIDE_CONTAINER: /home/node/ketida
  COMPOSE_FILE_STORYBOOK: docker-compose.storybook-deploy.yml
  COMPOSE_FILE_DEPLOY_DEVELOP: docker-compose.develop-deploy.yml
  COMPOSE_FILE_DEPLOY_DEMO: docker-compose.demo-deploy.yml

stages:
  - Branch checks
  - Docs
  - Build development
  - Lint & Unit test
  - Build production
  - Publish
  - Deploy

branch source and target rules:
  stage: Branch checks
  script:
    - if [[ "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" == "main" ]]; then exit 1; fi # do not allow MRs from main into anything
    - if [[ "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" != "develop" && "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "main" ]]; then exit 1; fi # only develop can be merged into main
    - if [[ "$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME" == "develop" && "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" != "main" ]]; then exit 1; fi # develop can only be merged into main

pages:
  image: node:lts
  stage: Docs
  cache:
    paths:
      - node_modules/
  script:
    - cd docs
    - yarn install
    - yarn build
  artifacts:
    expire_in: 30min
    paths:
      - docs/build
  publish: docs/build
  only:
    - main

## LINT & UNIT TEST

build development:
  extends: .build development
  stage: Build development
  variables:
    IMAGE_NAME: $IMAGE_NAME_DEVELOPMENT
    BUILD_PATH: $PATH_TO_BUILD

lint:
  extends: .lint
  stage: Lint & Unit test
  variables:
    IMAGE_NAME: $IMAGE_NAME_DEVELOPMENT
    WORKDIR: $PATH_INSIDE_CONTAINER
    STYLELINT: 1

unit test:
  extends: .client unit test
  stage: Lint & Unit test
  variables:
    IMAGE_NAME: $IMAGE_NAME_DEVELOPMENT
    WORKDIR: $PATH_INSIDE_CONTAINER

## BUILD PRODUCTION IMAGE

build preproduction develop:
  extends: .build production
  stage: Build production
  variables:
    IMAGE_NAME: $IMAGE_NAME_PREPRODUCTION_DEVELOP
    BUILD_PATH: $PATH_TO_BUILD
  only:
    - develop

build preproduction demo:
  extends: .build production
  stage: Build production
  variables:
    IMAGE_NAME: $IMAGE_NAME_PREPRODUCTION_DEMO
    BUILD_PATH: $PATH_TO_BUILD
  only:
    - main

## E2E TESTS -- TO DO --
# NOTE: update 'needs' for publish stage after adding e2e tests.

## PUBLISH PRODUCTION IMAGE

publish production develop:
  extends: .publish
  stage: Publish
  needs:
    - build preproduction develop
  variables:
    PREPRODUCTION_IMAGE_NAME: $IMAGE_NAME_PREPRODUCTION_DEVELOP
    PRODUCTION_IMAGE_NAME: $IMAGE_NAME_PRODUCTION_DEVELOP
  only:
    - develop

publish production demo:
  extends: .publish
  stage: Publish
  needs:
    - build preproduction demo
  variables:
    PREPRODUCTION_IMAGE_NAME: $IMAGE_NAME_PREPRODUCTION_DEMO
    PRODUCTION_IMAGE_NAME: $IMAGE_NAME_PRODUCTION_DEMO
  only:
    - main

build & publish storybook:
  extends: .build & publish storybook
  stage: Publish
  variables:
    IMAGE_NAME: $IMAGE_NAME_STORYBOOK
    BUILD_PATH: $PATH_TO_BUILD
  only:
    - develop

# DEPLOY

deploy storybook:
  extends: .deploy base
  stage: Deploy
  needs:
    - build & publish storybook
  variables:
    URL: $STORYBOOK_SSH_URL
    PORT: $STORYBOOK_SSH_PORT
    USER: $STORYBOOK_SSH_USER
    PRIVATE_KEY: $STORYBOOK_SSH_PRIVATE_KEY
    APP_PATH_ON_SERVER: $STORYBOOK_APP_PATH_ON_SERVER
    COMPOSE_FILE: $COMPOSE_FILE_STORYBOOK
    SERVICE_NAME: $SERVICE_NAME_STORYBOOK
  only:
    - develop
  environment:
    name: storybook
    url: https://$STORYBOOK_SSH_URL

# deploy develop:
#   extends: .deploy base
#   stage: Deploy
#   needs:
#     - publish production develop
#   variables:
#     URL: $DEVELOP_SSH_URL
#     PORT: $DEVELOP_SSH_PORT
#     USER: $DEVELOP_SSH_USER
#     PRIVATE_KEY: $DEVELOP_SSH_PRIVATE_KEY
#     APP_PATH_ON_SERVER: $DEVELOP_APP_PATH_ON_SERVER
#     COMPOSE_FILE: $COMPOSE_FILE_DEPLOY_DEVELOP
#     SERVICE_NAME: $SERVICE_NAME_DEPLOY_DEVELOP
#   only:
#     - develop

deploy:
  stage: Deploy
  image: $CI_REGISTRY/cokoinfra/ansible-deployer
  services:
    - docker:23-dind
  variables:
    ANSCOMPOSE_POSTGRES_ALLOW_SELF_SIGNED_CERTIFICATES: true #this is needed on some db setups like DO
    COMPOSE_SERVICES: client,server #comma separated value for each docker-compose service that should be converted into k8s object
    COMPOSE_SERVICES_client_URL: ketty-dev.coko.app #<service name> is each value defined in COMPOSE_SERVICES
    COMPOSE_SERVICES_client_IMAGE: cokoapps/ketty-client:latest # name of the image
    COMPOSE_SERVICES_server_URL: ketty-dev-server.coko.app #<service name> is each value defined in COMPOSE_SERVICES
    COMPOSE_SERVICES_server_IMAGE: cokoapps/ketty-server:latest # name of the image
    ANSCOMPOSE_SERVER_URL: ${SERVER_URL}
    ANSCOMPOSE_WEBSOCKET_SERVER_URL: ${WEBSOCKET_SERVER_URL}
    ANSCOMPOSE_NODE_ENV: production
    ANSCOMPOSE_KETIDA_FLAVOUR: LULU
    ANSCOMPOSE_PUBSWEET_SECRET: ${PUBSWEET_SECRET}
    ANSCOMPOSE_CLIENT_URL: ${CLIENT_URL}
    ANSCOMPOSE_SERVER_SERVE_CLIENT: false
    ANSCOMPOSE_POSTGRES_HOST: ${POSTGRES_HOST}
    ANSCOMPOSE_POSTGRES_PORT: ${POSTGRES_PORT}
    ANSCOMPOSE_POSTGRES_DB: ${POSTGRES_DB}
    ANSCOMPOSE_POSTGRES_USER: ${POSTGRES_USER}
    ANSCOMPOSE_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ANSCOMPOSE_WS_HEARTBEAT_INTERVAL: ${WS_HEARTBEAT_INTERVAL}
    ANSCOMPOSE_FAIL_SAFE_UNLOCKING_INTERVAL: ${FAIL_SAFE_UNLOCKING_INTERVAL}
    ANSCOMPOSE_MAILER_USER: ${MAILER_USER}
    ANSCOMPOSE_MAILER_PASSWORD: ${MAILER_PASSWORD}
    ANSCOMPOSE_MAILER_SENDER: ${MAILER_SENDER}
    ANSCOMPOSE_MAILER_HOSTNAME: ${MAILER_HOSTNAME}
    ANSCOMPOSE_PASSWORD_RESET_PATH_TO_PAGE: /password-reset
    ANSCOMPOSE_S3_PROTOCOL: ${S3_PROTOCOL}
    ANSCOMPOSE_S3_HOST: ${S3_HOST}
    ANSCOMPOSE_S3_PORT: ${S3_PORT}
    ANSCOMPOSE_S3_ACCESS_KEY_ID_USER: ${S3_ACCESS_KEY_ID_USER}
    ANSCOMPOSE_S3_SECRET_ACCESS_KEY_USER: ${S3_SECRET_ACCESS_KEY_USER}
    ANSCOMPOSE_S3_BUCKET: ${S3_BUCKET}
    ANSCOMPOSE_SERVICE_EPUB_CHECKER_CLIENT_ID: ${SERVICE_EPUB_CHECKER_CLIENT_ID}
    ANSCOMPOSE_SERVICE_EPUB_CHECKER_SECRET: ${SERVICE_EPUB_CHECKER_SECRET}
    ANSCOMPOSE_SERVICE_EPUB_CHECKER_URL: ${SERVICE_EPUB_CHECKER_URL}
    ANSCOMPOSE_SERVICE_PAGEDJS_CLIENT_ID: ${SERVICE_PAGEDJS_CLIENT_ID}
    ANSCOMPOSE_SERVICE_PAGEDJS_SECRET: ${SERVICE_PAGEDJS_SECRET}
    ANSCOMPOSE_SERVICE_PAGEDJS_URL: ${SERVICE_PAGEDJS_URL}
    ANSCOMPOSE_SERVICE_XSWEET_CLIENT_ID: ${SERVICE_XSWEET_CLIENT_ID}
    ANSCOMPOSE_SERVICE_XSWEET_SECRET: ${SERVICE_XSWEET_SECRET}
    ANSCOMPOSE_SERVICE_XSWEET_URL: ${SERVICE_XSWEET_URL}
    ANSCOMPOSE_FEATURE_UPLOAD_DOCX_FILES: true
    ANSCOMPOSE_FEATURE_BOOK_STRUCTURE: false
    ANSCOMPOSE_FEATURE_POD: true
    ANSCOMPOSE_TEMP_DIRECTORY_CRON_JOB_SCHEDULE: ${TEMP_DIRECTORY_CRON_JOB_TIMING}
    ANSCOMPOSE_TEMP_DIRECTORY_CRON_JOB_OFFSET: ${TEMP_DIRECTORY_CRON_JOB_OFFSET}
    ANSCOMPOSE_TEMP_DIRECTORY_CLEAN_UP: ${TEMP_DIRECTORY_CLEAN_UP:-true}
    ANSCOMPOSE_AI_ENABLED: ${AI_ENABLED}
    ANSCOMPOSE_CHAT_GPT_KEY: ${CHAT_GPT_KEY}
    do_spaces_access_key: $DIGITAL_OCEAN_SPACES_ACCESS_KEY
    do_spaces_secret_key: $DIGITAL_OCEAN_SPACES_SECRET_KEY
  script:
    - kubectl config get-contexts
    - kubectl config use-context ketty/agent:agent-1
    - cp docker-compose.demo-deploy.yml /ansible
    - cd /ansible
    - ANSIBLE_FORCE_COLOR=true ansible-playbook bootstrap.yml -e "compose_file=docker-compose.demo-deploy.yml"

deploy demo:
  extends: .deploy base
  stage: Deploy
  needs:
    - publish production demo
  variables:
    URL: $DEMO_SSH_URL
    PORT: $DEMO_SSH_PORT
    USER: $DEMO_SSH_USER
    PRIVATE_KEY: $DEMO_SSH_PRIVATE_KEY
    APP_PATH_ON_SERVER: $DEMO_APP_PATH_ON_SERVER
    COMPOSE_FILE: $COMPOSE_FILE_DEPLOY_DEMO
    SERVICE_NAME: $SERVICE_NAME_DEPLOY_DEMO
  only:
    - main
